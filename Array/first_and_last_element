// Binary search approach
// first and last element - search in range
// link - https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/

public class Main
{
    static public int[] searchRange(int[] nums, int target) {
        int res[]={-1,-1};
        
        int start=0;
        int end = nums.length-1;
        int k=0;
       
        while(start<=end)
        {
            int mid = start + (end-start)/2;
            
            if (target==nums[mid])
            { 
                int min=mid, max=mid;
                
                while(min>=0 && target==nums[min])
                   res[0] = min--;
                
                while(max<nums.length && target==nums[max])
                   res[1] = max++;
                
                return res;
            }
            else if (target < nums[mid])
               end = mid-1;
            else
               start = mid+1;
        }
        
        return res;
    }
    
	public static void main(String[] args) {
	    int arr[] = {5,7,7,8,8,10};
	    int target = 8;
	    
	    int result[] = new int[2];
	    result = searchRange(arr, target);
	    for (int i=0; i<result.length; i++)
	     System.out.println("Position of " + target + " is = " + result[i]);
	}
}

// 2nd approach
class Solution {
    public int[] searchRange(int[] nums, int target) {
        // create an array to store first and last occurance
        int arr[] = new int[2];
        arr[0] = -1;
        arr[1] = -1;
        
        // first occurance
        int start=0, end=nums.length-1;
        while(start<=end)
        {
            int mid = start + (end-start)/2;
            
            if(target == nums[mid])
            {
                // store the temp res and serach left for 1st occurance
                arr[0] = mid;
                end = mid-1;
            }
            else if(target < nums[mid])
                end = mid-1;
            else
                start = mid+1;
        }
        
        // last occurance
        start=0;
        end=nums.length-1;
        while(start<=end)
        {
            int mid = start + (end-start)/2;
            
            if(target == nums[mid])
            {
                // store the temp res and serach right for last occurance
                arr[1] = mid;
                start = mid+1;
            }
            else if(target < nums[mid])
                end = mid-1;
            else
                start = mid+1;
        }
        
        return arr;
    }
}
